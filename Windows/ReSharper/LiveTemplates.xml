<TemplatesExport>
  <Folder name="File 'LiveTemplates.xml'">
    <Template uid="b1e543b6-9d15-40fe-8349-b95ac6a91979" text="[Test]&#xD;&#xA;public void $TEST_NAME$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" shortcut="tc" description="Test case" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="TEST_NAME" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="1d8c5774-a5ae-4c94-9206-8a3a40fd70f4" text="[TestFixture]" shortcut="tf" description="TestFixture" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="908b39da-7edc-4fe0-8e5b-80910f94aaeb" text="[SetUp]&#xD;&#xA;public void SetUp()&#xD;&#xA;{&#xD;&#xA;   $END$&#xD;&#xA;}" shortcut="su" description="SetUp" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="321ceb80-808b-4078-924f-30a79652ab5d" text="[TearDown]&#xD;&#xA;public void TearDown()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" shortcut="td" description="TearDown" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="3ddb528f-40b3-4d0e-af29-2c0091ab983c" text="[TestFixtureSetUp]&#xD;&#xA;public void FixtureSetUp()&#xD;&#xA;{&#xD;&#xA;   $END$&#xD;&#xA;}" shortcut="fsu" description="Test Fixture Setup" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="48b8dbee-c42c-4e4c-a7f1-4981b44da3f6" text="[TestFixtureTearDown]&#xD;&#xA;public void FixtureTearDown()&#xD;&#xA;{&#xD;&#xA;   $END$&#xD;&#xA;}" shortcut="ftd" description="Test Fixture Tear Down" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="65780f88-cd4f-4883-8786-e4ff3bb6813f" text="throw new NotImplementedException();" shortcut="nie" description="Throw New NotImplementedException" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="686e7658-dc23-40d6-8559-c150f28f50d6" text="~$NAME$()&#xD;&#xA;{&#xD;&#xA;  Dispose(false);&#xD;&#xA;}" shortcut="dest" description="Destructor" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="NAME" expression="getFileNameWithoutExtension()" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="7c4e60bd-d207-41b1-930e-5c4c0d0c46ed" text="mockery.DynamicMock&lt;$TYPE$&gt;()" shortcut="mock" description="Mock Instance" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="TYPE" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="0852cb3b-a58a-4854-84ce-43350275919a" text="nmockery.NewMock&lt;$TYPE$&gt;()" shortcut="nmock" description="NMock Mock Object" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="TYPE" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="93e10284-1010-4a67-80fa-e89e8a80b992" text="mockery.ReplayAll();" shortcut="ra" description="ReplayAll" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="2484ace1-eb0e-40a2-bc19-e21790a8d729" text="LastCall.IgnoreArguments();" shortcut="ia" description="IgnoreArguments" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="91aceed4-7f02-444a-a2aa-cb45ea7b810b" text="using (mockery.Record())&#xD;&#xA;{&#xD;&#xA; $END$                &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;using (mockery.Playback())&#xD;&#xA;{&#xD;&#xA;                &#xD;&#xA;}" shortcut="record" description="Rhino Record Replay" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="4f6dcc61-511a-4346-91c6-c0bf7a5cb097" text="SetupResult.For($methodToInvoke$).Return($result$)" shortcut="sr" description="SetupResult" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="methodToInvoke" expression="" initialRange="0" />
        <Variable name="result" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="df7de06c-1df7-442a-9293-b65dd6ebb765" text="Expect.Call($ObjectMethod$)$END$" shortcut="ec" description="Expect.Call" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="ObjectMethod" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="d8b998c9-9fec-490b-9d53-020e6dec654a" text="Assert.AreEqual($EXPECTED$,$ACTUAL$);$END$" shortcut="ae" description="MbUnit Assert.AreEqual" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="EXPECTED" expression="" initialRange="0" />
        <Variable name="ACTUAL" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="3691bb2d-6cc0-4411-a498-06bbeb1e5f67" text="Assert.IsFalse($CONDITION$);$END$" shortcut="af" description="MbUnit Assert.IsFalse" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="CONDITION" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="6e5b154e-650a-4f8b-8d32-ec2cfc709909" text="Assert.IsInstanceOfType(typeof($expected$),$actual$);$END$" shortcut="ai" description="MbUnit Assert.IsInstanceOfType" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="expected" expression="guessExpectedType()" initialRange="0" />
        <Variable name="actual" expression="guessExpectedType()" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="c4c7d950-b6a6-4a46-b83b-718903a71c31" text="Assert.IsNull($object$);$END$" shortcut="an" description="MbUnit Assert.IsNull" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="object" expression="guessExpectedType()" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="6935edd8-b498-41d7-a494-a56e4c685197" text="Assert.IsNotNull($OBJECT$);$END$" shortcut="ann" description="MbUnit Assert.IsNotNull" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="OBJECT" expression="guessExpectedType()" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="3b024e3b-ac38-49ea-9e0a-11ad3839373f" text="Assert.AreSame($EXPECTED$,$ACTUAL$);$END$" shortcut="as" description="MbUnit Assert.AreSame" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="EXPECTED" expression="" initialRange="0" />
        <Variable name="ACTUAL" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="2d681748-f392-4f5d-8831-cb6768eb4a33" text="Assert.IsTrue($condition$);$END$" shortcut="at" description="MbUnit Assert.IsTrue" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="condition" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="8ebd97d1-1d44-469c-a81d-4fceba30a4ce" text="[Explicit]$END$" shortcut="ea" description="MbUnit Explicit Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="4c9fd940-f623-450b-8457-9c4317c14e75" text="[ExpectedException(typeof($exceptionType$))]$END$" shortcut="eea" description="MbUnit ExpectedException Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="exceptionType" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="875ce880-3665-461b-8b97-b6bb2abec83e" text="[Ignore(&quot;$reason$&quot;)]$END$" shortcut="ig" description="MbUnit Ignore Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="reason" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="048173ae-b526-46ac-bb0c-1818a9e681f9" text="public" shortcut="p" description="public" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="b6926f8d-953e-4b79-a3bb-6dec8b42cafe" text="public string $VARIABLE_NAME$;$END$" shortcut="ps" description="public string" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="VARIABLE_NAME" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="2d480da0-1c82-4ccd-a86b-b064787dd0d8" text="public void $METHOD_NAME$()&#xD;&#xA;{&#xD;&#xA;  $END$&#xD;&#xA;}" shortcut="pv" description="public void" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="METHOD_NAME" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="f580d2ae-ff25-49ff-b5e8-6c2f5fe5ee99" text="StringAssert.Contains($expected$, $actual$);$END$" shortcut="sac" description="MbUnit StringAssert.Contains" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="expected" expression="guessExpectedType()" initialRange="0" />
        <Variable name="actual" expression="guessExpectedType()" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="b9b31442-aefa-4164-a59e-7850e12c88c9" text="[SetUp]" shortcut="sua" description="MbUnit Setup Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="9d392409-f931-4d71-95a5-934ce17ed344" text="[Test]" shortcut="ta" description="MbUnit Test Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="f77a7378-f20d-44f0-9a35-8b27ba13bde6" text="[TearDown]" shortcut="tda" description="MbUnit TearDown Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="9c7595e1-eec3-4527-8cff-7d9e0222d0f0" text="[TestFixtureSetUp]" shortcut="tfsa" description="MbUnit TestFixtureSetup Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="5260b4d2-bea2-4e9a-b07e-4d073209a314" text="[TestFixtureTearDown]" shortcut="tftda" description="MbUnit TestFixtureTearDown Attribute" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="d33f98c8-55c8-4052-9560-dfa35629b95c" text="using MbUnit.Framework;$END$" shortcut="unuf" description="Import MbUnit Framework" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="90dea78f-7524-466a-b3ea-34d81b8d31fc" text="private $TYPE$ $NAME$;$END$" shortcut="v" description="private" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="TYPE" expression="" initialRange="0" />
        <Variable name="NAME" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="4a58bdbc-1853-42de-8824-35bd11354874" text="private string $VARIABLE_NAME$;$END$" shortcut="vs" description="private string" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="VARIABLE_NAME" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="c1c92a26-c34a-4e42-b2fc-d1cf32036a9d" text="MockRepository mockery = new MockRepository();" shortcut="mockery" description="create a mockrepository" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="9c871800-0367-4968-b56b-d1e996100faf" text="public string $NAME$;" shortcut="pucs" description="public string" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="NAME" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="477daf14-2d5a-49b5-a4ed-7d59209e3791" text="private $INTERFACETYPE$ CreateSUT()&#xD;&#xA;{&#xD;&#xA;	 return new $INTERFACEIMPLEMENTATION$($ARGS$);&#xD;&#xA;}" shortcut="sut" description="Create System Under Test" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="INTERFACETYPE" expression="" initialRange="0" />
        <Variable name="INTERFACEIMPLEMENTATION" expression="" initialRange="0" />
        <Variable name="ARGS" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="1dafd4ea-b2a6-479e-a4b3-323f9d3db78c" text="using (Mocks.Record())&#xD;&#xA;{&#xD;&#xA; $END$                &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;using (Mocks.Playback())&#xD;&#xA;{&#xD;&#xA;                &#xD;&#xA;}" shortcut="arecord" description="Rhino Record With Auto Mocking Container" reformat="true" shortenQualifiedReferences="true">
      <Variables />
      <CustomProperties />
    </Template>
    <Template uid="3e147156-d560-4017-9eab-ae8b7b05d5ad" text="Mock&lt;$ItemTypeToRetrieveFromTheContainer$&gt;()" shortcut="amock" description="A Mock from the auto mocking container" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="ItemTypeToRetrieveFromTheContainer" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
    <Template uid="3330d417-09a4-422b-a750-3c467ac6f0b0" text="private $DependencyInterface$ mock$Name$&#xD;&#xA;{&#xD;&#xA;  get { return Mock&lt;$DependencyInterface$&gt;();}&#xD;&#xA;}" shortcut="md" description="Mock Dependency" reformat="true" shortenQualifiedReferences="true">
      <Variables>
        <Variable name="DependencyInterface" expression="" initialRange="0" />
        <Variable name="Name" expression="" initialRange="0" />
      </Variables>
      <CustomProperties />
    </Template>
  </Folder>
</TemplatesExport>